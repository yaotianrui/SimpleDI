package com.ytr.injector.writer;

import com.ytr.injector.mode.FieldBean;
import com.ytr.injector.mode.MethodBean;
import com.ytr.injector.mode.ParameterBean;
import com.ytr.injector.mode.TypeBean;

import java.io.IOException;
import java.io.Writer;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

import javax.annotation.processing.Filer;
import javax.annotation.processing.ProcessingEnvironment;
import javax.tools.JavaFileObject;

/**
 * Created by YTR on 2017/9/8.
 * java文件生成器
 * QQ:972714805
 */

public abstract class AbstractWriter {

    protected static Filer mFiler;

    public AbstractWriter(ProcessingEnvironment processingEnvironment) {
        mFiler = processingEnvironment.getFiler();
    }

    protected static ClassBuilder builder() {
        return new ClassBuilder();
    }

    public static class ClassBuilder {
        //拼接的字符串信息
        StringBuilder sb;
        //要创建的文件的包名
        String packageName;
        //要创建的文件的类名
        String className;

        public ClassBuilder() {
            sb = new StringBuilder();
        }

        /**
         * 写类的包名
         * @param packageName
         * @return
         */
        public ClassBuilder buildPackage(String packageName) {
            this.packageName = packageName;
            sb.append("package ").append(packageName).append(";\n\n");
            return this;
        }

        /**
         * 写导包部分
         * @param typeBean
         * @return
         */
        public ClassBuilder buildImport(TypeBean typeBean) {
            sb.append("import ").append(typeBean.packageName).append(".").append(typeBean.simpleName).append(";\n");
            return this;
        }

        /**
         * 写注释
         * @return
         */
        public ClassBuilder buildCopyright() {
            sb.append("/**\n")
                    .append("*This class generated by com.ytr.injector.DIProcessor\n")
                    .append("* Time : ")
                    .append(new SimpleDateFormat("yyyy/MM/dd hh:mm:ss").format(new Date()) + "\n")
                    .append("* Do not modify!\n")
                    .append("*/\n");
            return this;
        }

        /**
         * 写类的开头
         * @param modifier  修饰符
         * @param className 类名
         * @param isInner   是否是内部类
         * @return
         */
        public ClassBuilder buildClassStart(String modifier, String className, boolean isInner) {
            buildClassStart(modifier, className, null, isInner);
            return this;
        }

        /**
         * 写类的开头
         * @param modifier  修饰符
         * @param className 类名
         * @param parentName    父类
         * @param isInner   是否是内部类
         * @return
         */
        public ClassBuilder buildClassStart(String modifier, String className, String parentName, boolean isInner) {
            buildClassStart(modifier, className, parentName, null, isInner);
            return this;
        }

        /**
         * 写类的开头
         * @param modifier  修饰符
         * @param className 类名
         * @param parentName    父类
         * @param interfaceNames    实现的接口
         * @param isInner   是否是内部类
         * @return
         */
        public ClassBuilder buildClassStart(String modifier, String className, String parentName, String[] interfaceNames, boolean isInner) {
            if (!isInner) {
                this.className = className;
            }
            if (isInner) {
                sb.append("\t");
            }
            sb.append(modifier).append("class ").append(className);
            if (parentName != null) {
                sb.append(" extends ").append(parentName);
            }
            if (interfaceNames != null && interfaceNames.length > 0) {
                sb.append(" implements ");
                for (int i = 0; i < interfaceNames.length; i++) {
                    String interfacesName = interfaceNames[i];
                    sb.append(interfacesName);
                    if (i != interfaceNames.length - 1) {
                        sb.append(",");
                    }
                }
            }
            sb.append(" {\n\n");
            return this;
        }

        /**
         * 写类的结尾
         * @param isInner   是否是内部类
         * @return
         */
        public ClassBuilder buildClassEnd(boolean isInner) {
            if (isInner) {
                sb.append("\t");
            }
            sb.append("}\n");
            return this;
        }

        /**
         * 写成员变量
         * @param fieldBean
         * @param isInner
         * @return
         */
        public ClassBuilder buildField(FieldBean fieldBean, boolean isInner) {
            if (isInner) {
                sb.append("\t");
            }
            sb.append("\t").append(fieldBean.modifier).append(fieldBean.fieldType.simpleName).append(" ").append(fieldBean.fieldName).append(";\n\n");
            return this;
        }

        /**
         * 写方法的开头
         * @param methodBean    方法信息（包含 方法的修饰符、返回值、方法名称，形式参数等）
         * @param isOverride    是否是重写父类的方法
         * @param isInner   是否是内部类
         * @return
         */
        public ClassBuilder buildMethodStrat(MethodBean methodBean, boolean isOverride, boolean isInner) {
            if (isOverride) {
                if (isInner) {
                    sb.append("\t");
                }
                sb.append("\t@Override\n");
            }
            if (isInner) {
                sb.append("\t");
            }
            sb.append("\t")
                    .append(methodBean.modifier)
                    .append(methodBean.returnType.simpleName)
                    .append(" ")
                    .append(methodBean.methodName)
                    .append("(");
            if (methodBean.parameterList != null) {
                for (int i = 0; i < methodBean.parameterList.size(); i++) {
                    ParameterBean parameterBean = methodBean.parameterList.get(i);
                    sb.append(parameterBean.typeBean.simpleName)
                            .append(" ")
                            .append(parameterBean.parameterName);
                    if (i != methodBean.parameterList.size() - 1) {
                        sb.append(", ");
                    }
                }
            }
            sb.append(")")
                    .append(" {\n");

            return this;
        }

        /**
         * 方法的结尾
         * @param isInner   是否是内部类
         * @return
         */
        public ClassBuilder buildMethodEnd(boolean isInner) {
            if (isInner) {
                sb.append("\t");
            }
            sb.append("\t}\n\n");
            return this;
        }

        /**
         * 写方法体
         * @param methodContent 方法体重的类容
         * @return
         */
        public ClassBuilder buildMethodContent(String methodContent) {
            sb.append(methodContent);
            return this;
        }

        /**
         * 写构造方法
         * @param className 类名
         * @param parameterList 构造参数
         * @param isInner   是否是内部类
         * @return
         */
        public ClassBuilder buildConstructor(String className, List<ParameterBean> parameterList, boolean isInner) {
            if (isInner) {
                sb.append("\t");
            }
            sb.append("\tpublic ")
                    .append(className)
                    .append("(");
            if (parameterList != null) {
                for (int i = 0; i < parameterList.size(); i++) {
                    ParameterBean parameterBean = parameterList.get(i);
                    sb.append(parameterBean.typeBean.simpleName)
                            .append(" ")
                            .append(parameterBean.parameterName);
                    if (i != parameterList.size() - 1) {
                        sb.append(", ");
                    }
                }
            }
            sb.append(")")
                    .append(" {\n");
            return this;
        }

        /**
         * 保存成java源码文件
         */
        public void build() {
            try {
                JavaFileObject sourceFile = mFiler.createSourceFile(packageName + "." + className);
                Writer writer = sourceFile.openWriter();
                writer.write(sb.toString());
                writer.flush();
                writer.close();
            } catch (IOException e) {
                e.printStackTrace();
            }
        }
    }
}
